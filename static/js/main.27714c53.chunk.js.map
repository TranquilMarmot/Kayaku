{"version":3,"sources":["types.ts","actions.ts","CardsReducer.ts","Card/ConfidenceGrid/Confidence.tsx","Card/ConfidenceGrid/Info.tsx","Card/ConfidenceGrid/index.tsx","Button.tsx","Modal/index.tsx","Modal/Footer.tsx","Card/EditCardModal/ConfidenceDropdown.tsx","Card/EditCardModal/index.tsx","Card/CardActions.tsx","Card/index.tsx","GiveHintModal/CardSelection.tsx","GiveHintModal/ColorOrNumberRadioButtons.tsx","GiveHintModal/index.tsx","OptionsModal.tsx","Footer.tsx","Hand.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Confidence","Actions","createCard","color","blue","Unknown","yellow","red","green","white","number","one","two","three","four","five","CardsReducer","state","action","type","GiveHint","hand","_ref","indices","map","card","index","inHint","includes","Object","objectSpread","defineProperty","Positive","Negative","giveHint","PlayCard","_ref2","cardsMinusPlayed","toConsumableArray","splice","push","playCard","EditCard","editCard","confidence","ConfidenceType","core_browser_esm","role","aria-label","infoStyle","row","column","css","_templateObject","Info","infoType","infoKey","emoji","react_default","a","Fragment","concat","ConfidenceGrid_Confidence","confidenceGridContainerStyle","ConfidenceGrid_templateObject","confidenceGridStyle","_templateObject2","ConfidenceGrid","ConfidenceGrid_Info","buttonStyle","Button_templateObject","Button","props","children","assign","baseModalBackground","Modal_templateObject","baseModalContent","Modal_templateObject2","Modal","footerStyle","Footer_templateObject","footerButtonStyle","Footer_templateObject2","Footer","onCloseClick","onConfirmClick","src_Button","onClick","emojiStyle","ConfidenceDropdown_templateObject","ConfidenceDropdown","onChange","dropdownType","dropdownKey","dropdownId","currentConfidence","htmlFor","id","e","key","value","setCardValue","target","defaultValue","onSaveCard","onCloseEditCardModal","dispatch","onCloseActions","dropdownContainerStyle","EditCardModal_templateObject","EditCardModal","_useState","useState","_useState2","slicedToArray","editedCard","onEditedCardChange","src_Modal","EditCardModal_ConfidenceDropdown","Modal_Footer","onPlayCard","containerStyle","CardActions_templateObject","CardActions_templateObject2","CardActions","showingEditModal","onChangeShowingEditModal","Card_EditCardModal","cardStyle","Card_templateObject","Card","_useContext","useContext","CardsContext","_useContext2","cards","showingActions","setShowingActions","Card_ConfidenceGrid","Card_CardActions","onCheckboxChange","selectedCards","setSelectedCards","dataset","checked","selectCardChecboxLabelStyle","CardSelection_templateObject","selectCardCheckboxContainerStyle","CardSelection_templateObject2","CardSelection","selectCardCheckboxes","i","length","data-card-index","data-index","_templateObject3","labelStyle","ColorOrNumberRadioButtons_templateObject","renderColorOrNumberRadioButton","selectedNumberOrColor","setSelectedNumberOrColor","name","radioListStyle","ColorOrNumberRadioButtons_templateObject2","ColorOrNumberRadioButtons","hintSelectionStyle","GiveHintModal_templateObject","dispatchHint","closeModal","selectedIndices","forEach","isChecked","selectedColor","isColor","undefined","selectedNumber","isNumber","GiveHintModal","Array","fill","_useState3","_useState4","GiveHintModal_CardSelection","GiveHintModal_ColorOrNumberRadioButtons","OptionsModal","onCloseOptionsModal","initialState","src_Footer_templateObject","src_Footer_templateObject2","setShowingGiveHintModal","showingOptionsModal","setShowingOptionsModal","src_OptionsModal","mainContainerStyle","Hand_templateObject","cardsContainerStyle","Hand_templateObject2","Hand","numberOfCards","getInitialState","createContext","showingGiveHintModal","cardsGrid","Hand_templateObject3","Provider","useReducer","src_Card","renderCards","src_Footer","src_GiveHintModal","App_templateObject","numberOfCardsContainerStyle","App_templateObject2","numberOfCardsButtonStyle","App_templateObject3","titleStyle","_templateObject4","App","setNumberOfCards","src_Hand","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","createElement","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.27714c53.chunk.js","sourcesContent":["/** Confidenve level for a color or number */\r\nexport enum Confidence {\r\n  Unknown = \"unknown\",\r\n  Positive = \"positive\",\r\n  Negative = \"negative\"\r\n}\r\n\r\n/** Represents a card in the player's hand, which has confidence levels for color and number */\r\nexport interface Card {\r\n  color: {\r\n    blue: Confidence;\r\n    yellow: Confidence;\r\n    red: Confidence;\r\n    green: Confidence;\r\n    white: Confidence;\r\n    [key: string]: Confidence;\r\n  };\r\n  number: {\r\n    one: Confidence;\r\n    two: Confidence;\r\n    three: Confidence;\r\n    four: Confidence;\r\n    five: Confidence;\r\n    [key: string]: Confidence;\r\n  };\r\n  [key: string]: object;\r\n}\r\n","import { Card } from \"./types\";\r\n\r\n/** List of action types */\r\nexport enum Actions {\r\n  GiveHint = \"GiveHint\",\r\n  PlayCard = \"PlayCard\",\r\n  EditCard = \"EditCard\"\r\n}\r\n\r\n/** Base Action interface that all Actions extend */\r\ninterface Action {\r\n  type: Actions;\r\n}\r\n\r\n/** Give the player a hint about multiple cards */\r\nexport interface GiveHintAction extends Action {\r\n  indices: number[];\r\n  color?: string;\r\n  number?: string;\r\n}\r\n\r\n/**\r\n * Give the player a hint about multiple cards.\r\n * This should have either number or color, but never both.\r\n * @param indices Indices to give hint about\r\n * @param color Color that this hint is about\r\n * @param number Number that this hint is about\r\n */\r\nexport const GiveHint = (\r\n  indices: number[],\r\n  color?: string,\r\n  number?: string\r\n): GiveHintAction => ({\r\n  type: Actions.GiveHint,\r\n  indices,\r\n  color,\r\n  number\r\n});\r\n\r\n/** Play a card at a specific index */\r\nexport interface PlayCardAction extends Action {\r\n  index: number;\r\n}\r\n\r\n/**\r\n * Play a card at a specific index\r\n * @param index Index of card to play\r\n */\r\nexport const PlayCard = (index: number) => ({\r\n  type: Actions.PlayCard,\r\n  index\r\n});\r\n\r\n/** Edit a card at a specific index */\r\nexport interface EditCardAction extends Action {\r\n  index: number;\r\n  card: Card;\r\n}\r\n\r\n/**\r\n * Edit (replace) a card at a given index\r\n * @param index Index of card to edit\r\n * @param card Updated card\r\n */\r\nexport const EditCard = (index: number, card: Card) => ({\r\n  type: Actions.EditCard,\r\n  index,\r\n  card\r\n});\r\n\r\n/** All action types */\r\nexport type ActionTypes = GiveHintAction | PlayCardAction | EditCardAction;\r\n","import { Card, Confidence } from \"./types\";\r\nimport {\r\n  Actions,\r\n  ActionTypes,\r\n  GiveHintAction,\r\n  PlayCardAction,\r\n  EditCardAction\r\n} from \"./actions\";\r\n\r\n/** Creates a card with empty (unknown) confidence for everything */\r\nconst createCard = (): Card => ({\r\n  color: {\r\n    blue: Confidence.Unknown,\r\n    yellow: Confidence.Unknown,\r\n    red: Confidence.Unknown,\r\n    green: Confidence.Unknown,\r\n    white: Confidence.Unknown\r\n  },\r\n  number: {\r\n    one: Confidence.Unknown,\r\n    two: Confidence.Unknown,\r\n    three: Confidence.Unknown,\r\n    four: Confidence.Unknown,\r\n    five: Confidence.Unknown\r\n  }\r\n});\r\n\r\n/**\r\n * Create a hand with the given number of empty cards\r\n * @param numberOfCards Number of cards in hand\r\n */\r\nexport const getInitialState = (numberOfCards: number): Card[] => {\r\n  const cards: Card[] = [];\r\n\r\n  for (let i = 0; i < numberOfCards; i++) {\r\n    cards.push(createCard());\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\n/**\r\n * Gives a hint to the player.\r\n * The hint contains a list of indices in the hand, and the color or number for the hint.\r\n * This will set the confidence to positive for the color/number for the given indices,\r\n * and set the confidence to negative for all other indices\r\n * @param hand Hand to apply hint to\r\n * @param action Action containing hint being given\r\n */\r\nconst giveHint = (\r\n  hand: Card[],\r\n  { indices, color, number }: GiveHintAction\r\n): Card[] =>\r\n  hand.map((card, index) => {\r\n    // check if this card is in the hint\r\n    // if it is, the confidence is positive\r\n    // otherwise it's negative\r\n    const inHint = indices.includes(index);\r\n\r\n    // hint is about a color\r\n    if (color) {\r\n      return {\r\n        ...card,\r\n        color: {\r\n          ...card.color,\r\n          [color]: inHint ? Confidence.Positive : Confidence.Negative\r\n        }\r\n      };\r\n    }\r\n\r\n    // hint it about a number\r\n    if (number) {\r\n      return {\r\n        ...card,\r\n        number: {\r\n          ...card.number,\r\n          [number]: inHint ? Confidence.Positive : Confidence.Negative\r\n        }\r\n      };\r\n    }\r\n\r\n    // neither color or number (tehcnically an invalid hint)\r\n    return card;\r\n  });\r\n\r\n/**\r\n * This will remove the given card and replace it with a new, blank card.\r\n * This assumes that new cards are added to the right side of the hand.\r\n * @param hand Player's current hand\r\n * @param action Action containing the card being played\r\n */\r\nconst playCard = (hand: Card[], { index }: PlayCardAction): Card[] => {\r\n  // clone the hand\r\n  const cardsMinusPlayed = [...hand];\r\n\r\n  // filter out the card we just played\r\n  cardsMinusPlayed.splice(index, 1);\r\n\r\n  // add a new card\r\n  cardsMinusPlayed.push(createCard());\r\n  return cardsMinusPlayed;\r\n};\r\n\r\n/**\r\n * Edits (replaces) a card in the player's hand\r\n * @param hand Player's current hand\r\n * @param action Action containing index of card to edit\r\n */\r\nconst editCard = (hand: Card[], action: EditCardAction): Card[] =>\r\n  hand.map((card, index) => {\r\n    if (index === action.index) {\r\n      return action.card;\r\n    }\r\n\r\n    return card;\r\n  });\r\n\r\nexport default (state: Card[], action: ActionTypes): Card[] => {\r\n  switch (action.type) {\r\n    case Actions.GiveHint:\r\n      return giveHint(state, action as GiveHintAction);\r\n    case Actions.PlayCard:\r\n      return playCard(state, action as PlayCardAction);\r\n    case Actions.EditCard:\r\n      return editCard(state, action as EditCardAction);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport { Confidence as ConfidenceType } from \"../../types\";\r\n\r\ninterface ConfidenceProps {\r\n  confidence: ConfidenceType;\r\n}\r\n\r\n/**\r\n * Renders the given confidence\r\n */\r\nconst Confidence: FunctionComponent<ConfidenceProps> = ({ confidence }) => {\r\n  switch (confidence) {\r\n    case ConfidenceType.Positive:\r\n      return (\r\n        <span role=\"img\" aria-label=\"positive\">\r\n          ✔\r\n        </span>\r\n      );\r\n    case ConfidenceType.Negative:\r\n      return (\r\n        <span role=\"img\" aria-label=\"negative\">\r\n          ❌\r\n        </span>\r\n      );\r\n    case ConfidenceType.Unknown:\r\n    default:\r\n      return <span />;\r\n  }\r\n};\r\n\r\nexport default Confidence;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\nimport { Card } from \"../../types\";\r\n\r\nimport Confidence from \"./Confidence\";\r\n\r\ninterface InfoProps {\r\n  card: Card;\r\n  infoType: \"color\" | \"number\";\r\n  infoKey: string;\r\n  emoji: string;\r\n  row: number;\r\n}\r\n\r\nconst infoStyle = (row: number, column: number) => css`\r\n  grid-row: ${row};\r\n  grid-column: ${column};\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid gray;\r\n  border-top: 1px solid gray;\r\n`;\r\n\r\n/**\r\n * Renders the confidence level for the given card and type\r\n */\r\nconst Info: FunctionComponent<InfoProps> = ({\r\n  card,\r\n  infoType,\r\n  infoKey,\r\n  emoji,\r\n  row\r\n}) => (\r\n  <React.Fragment>\r\n    <div css={infoStyle(row, 1)}>\r\n      <span role=\"img\" aria-label={`${infoKey}`}>\r\n        {emoji}\r\n      </span>\r\n    </div>\r\n    <div css={infoStyle(row, 2)}>\r\n      <Confidence confidence={card[infoType][infoKey]} />\r\n    </div>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Info;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport { Card } from \"../../types\";\r\n\r\nimport Info from \"./Info\";\r\n\r\nconst confidenceGridContainerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 97%;\r\n  margin-top: 3%;\r\n`;\r\n\r\nconst confidenceGridStyle = css`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\r\n  font-size: 20px;\r\n  flex: 1;\r\n`;\r\n\r\ninterface ConfidenceGridProps {\r\n  card: Card;\r\n}\r\n\r\n/**\r\n * A grid that displays the confidence level for every color and number of a card.\r\n */\r\nconst ConfidenceGrid: FunctionComponent<ConfidenceGridProps> = ({ card }) => {\r\n  return (\r\n    <div css={confidenceGridContainerStyle}>\r\n      <div css={confidenceGridStyle}>\r\n        <Info card={card} infoType=\"color\" infoKey=\"blue\" emoji=\"🔷\" row={1} />\r\n        <Info\r\n          card={card}\r\n          infoType=\"color\"\r\n          infoKey=\"yellow\"\r\n          emoji=\"💛\"\r\n          row={2}\r\n        />\r\n        <Info card={card} infoType=\"color\" infoKey=\"red\" emoji=\"🔺\" row={3} />\r\n        <Info card={card} infoType=\"color\" infoKey=\"green\" emoji=\"🍏\" row={4} />\r\n        <Info card={card} infoType=\"color\" infoKey=\"white\" emoji=\"⬜\" row={5} />\r\n      </div>\r\n      <div css={confidenceGridStyle}>\r\n        <Info card={card} infoType=\"number\" infoKey=\"one\" emoji=\"1️⃣\" row={1} />\r\n        <Info card={card} infoType=\"number\" infoKey=\"two\" emoji=\"2️⃣\" row={2} />\r\n        <Info\r\n          card={card}\r\n          infoType=\"number\"\r\n          infoKey=\"three\"\r\n          emoji=\"3️⃣\"\r\n          row={3}\r\n        />\r\n        <Info card={card} infoType=\"number\" infoKey=\"four\" emoji=\"4️⃣\" row={4} />\r\n        <Info card={card} infoType=\"number\" infoKey=\"five\" emoji=\"5️⃣\" row={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfidenceGrid;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\ninterface ButtonProps {\r\n  children: string | JSX.Element;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nconst buttonStyle = css`\r\n  transition: all 0.3s ease;\r\n  border-radius: 10px;\r\n  padding: 10px 15px;\r\n  box-shadow: 0 0 6px 0 rgba(157, 96, 212, 0.5);\r\n  border: solid 2px transparent;\r\n  background-image: linear-gradient(\r\n      rgba(255, 255, 255, 0),\r\n      rgba(255, 255, 255, 0)\r\n    ),\r\n    linear-gradient(135deg, #ff0000 0%, #0000ff 50%, #ffff00 100%);\r\n  color: #00ff00;\r\n  font-weight: 800;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: all 0.5s ease;\r\n    box-shadow: 3px 3px 6px 0 rgba(157, 96, 212, 0.5);\r\n  }\r\n`;\r\n\r\n/**\r\n * Reusable button component with fancy rainbow effect\r\n */\r\nconst Button: FunctionComponent<ButtonProps> = props => {\r\n  const { children } = props;\r\n  return (\r\n    <button css={buttonStyle} {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nconst baseModalBackground = css`\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1000; /* Sit on top */\r\n  padding-top: 10px; /* Location of the box */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  overflow: auto; /* Enable scroll if needed */\r\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\r\n`;\r\n\r\nconst baseModalContent = css`\r\n  margin: auto;\r\n  border: 1px solid #888;\r\n  width: 80%;\r\n  color: black;\r\n  background: linear-gradient(\r\n    315deg,\r\n    rgba(137, 196, 255, 1) 0%,\r\n    rgba(50, 255, 57, 1) 100%\r\n  );\r\n`;\r\n\r\n/**\r\n * Generic reusable modal component\r\n */\r\nconst Modal: FunctionComponent = ({ children }) => (\r\n  <div css={baseModalBackground}>\r\n    <div css={baseModalContent}>{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Modal;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport Button from \"../Button\";\r\n\r\nconst footerStyle = css`\r\n  border-top: 2px solid grey;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst footerButtonStyle = css`\r\n  padding: 15px 20px;\r\n  width: 100px;\r\n`;\r\n\r\ninterface FooterProps {\r\n  onCloseClick: () => void;\r\n  onConfirmClick: () => void;\r\n}\r\n\r\n/**\r\n * Footer for a Modal that has Cancel and Apply buttons\r\n */\r\nconst Footer: FunctionComponent<FooterProps> = ({\r\n  onCloseClick,\r\n  onConfirmClick\r\n}) => (\r\n  <div css={footerStyle}>\r\n    <Button css={footerButtonStyle} onClick={onCloseClick}>\r\n      Cancel\r\n    </Button>\r\n    <Button css={footerButtonStyle} onClick={onConfirmClick}>\r\n      Apply\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, Dispatch, SetStateAction } from \"react\";\r\n\r\nimport { Card, Confidence } from \"../../types\";\r\n\r\nconst setCardValue = (\r\n  card: Card,\r\n  type: string,\r\n  key: string,\r\n  value: Confidence\r\n): Card => {\r\n  return {\r\n    ...card,\r\n    [type]: {\r\n      ...card[type],\r\n      [key]: value\r\n    }\r\n  };\r\n};\r\n\r\nconst emojiStyle = css`\r\n  font-size: 30px;\r\n  padding: 10px;\r\n  min-width: 50px;\r\n  display: inline-block;\r\n`;\r\n\r\ninterface ConfidenceDropdownProps {\r\n  onChange: Dispatch<SetStateAction<Card>>;\r\n  card: Card;\r\n  dropdownType: \"color\" | \"number\";\r\n  dropdownKey: string;\r\n  emoji: string;\r\n}\r\n\r\n/**\r\n * Render a dropdown to choose the confidence level of a color or number for a card\r\n */\r\nconst ConfidenceDropdown: FunctionComponent<ConfidenceDropdownProps> = ({\r\n  onChange,\r\n  card,\r\n  dropdownType,\r\n  dropdownKey,\r\n  emoji\r\n}) => {\r\n  const dropdownId = `dropdown-${dropdownType}-${dropdownKey}`;\r\n\r\n  const currentConfidence = card[dropdownType][dropdownKey];\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor={dropdownId}>\r\n        <span css={emojiStyle} role=\"img\" aria-label={`${dropdownKey}`}>\r\n          {emoji}\r\n        </span>\r\n      </label>\r\n      <select\r\n        id={dropdownId}\r\n        onChange={e =>\r\n          onChange(\r\n            setCardValue(card, dropdownType, dropdownKey, e.target\r\n              .value as Confidence)\r\n          )\r\n        }\r\n        defaultValue={currentConfidence}\r\n      >\r\n        <option value={Confidence.Unknown}> </option>\r\n        <option value={Confidence.Positive}>\r\n          {/* eslint-ignore jsx-a11y/accessible-emoji */}✔\r\n        </option>\r\n        <option value={Confidence.Negative}>\r\n          {/* eslint-ignore jsx-a11y/accessible-emoji */}❌\r\n        </option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfidenceDropdown;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\n\r\nimport Modal from \"../../Modal\";\r\nimport Footer from \"../../Modal/Footer\";\r\nimport { Card } from \"../../types\";\r\nimport { ActionTypes, EditCard } from \"../../actions\";\r\n\r\nimport ConfidenceDropdown from \"./ConfidenceDropdown\";\r\n\r\nconst onSaveCard = (\r\n  card: Card,\r\n  index: number,\r\n  onCloseEditCardModal: () => void,\r\n  dispatch: (action: ActionTypes) => void,\r\n  onCloseActions: () => void\r\n) => {\r\n  dispatch(EditCard(index, card));\r\n  onCloseEditCardModal();\r\n  onCloseActions();\r\n};\r\n\r\nconst dropdownContainerStyle = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\ninterface EditCardModalProps {\r\n  index: number;\r\n  card: Card;\r\n  onCloseEditCardModal: () => void;\r\n  dispatch: (action: ActionTypes) => void;\r\n  onCloseActions: () => void;\r\n}\r\n\r\n/**\r\n * Renders a modal to edit the current confidence values of a card\r\n */\r\nconst EditCardModal: FunctionComponent<EditCardModalProps> = ({\r\n  index,\r\n  card,\r\n  onCloseEditCardModal,\r\n  dispatch,\r\n  onCloseActions\r\n}) => {\r\n  const [editedCard, onEditedCardChange] = useState(card);\r\n\r\n  return (\r\n    <Modal>\r\n      <React.Fragment>\r\n        <h1>Edit Card</h1>\r\n        <div css={dropdownContainerStyle}>\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"blue\"\r\n            emoji=\"🔷\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"yellow\"\r\n            emoji=\"💛\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"red\"\r\n            emoji=\"🔺\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"green\"\r\n            emoji=\"🍏\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"white\"\r\n            emoji=\"⬜\"\r\n          />\r\n        </div>\r\n        <div css={dropdownContainerStyle}>\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"one\"\r\n            emoji=\"1️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"two\"\r\n            emoji=\"2️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"three\"\r\n            emoji=\"3️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"four\"\r\n            emoji=\"4️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"five\"\r\n            emoji=\"5️⃣\"\r\n          />\r\n        </div>\r\n        <Footer\r\n          onCloseClick={onCloseEditCardModal}\r\n          onConfirmClick={() =>\r\n            onSaveCard(\r\n              editedCard,\r\n              index,\r\n              onCloseEditCardModal,\r\n              dispatch,\r\n              onCloseActions\r\n            )\r\n          }\r\n        />\r\n      </React.Fragment>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditCardModal;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState } from \"react\";\r\n\r\nimport Button from \"../Button\";\r\nimport { ActionTypes, PlayCard } from \"../actions\";\r\nimport { Card } from \"../types\";\r\n\r\nimport EditCardModal from \"./EditCardModal\";\r\n\r\n/**\r\n * Called when a card is played. Dispatches an action to the reducer and closes the actions on the card.\r\n * @param index Index of card to play\r\n * @param onCloseActions Function to call to close the actions\r\n * @param dispatch Function to dispatch to reducer\r\n */\r\nconst onPlayCard = (\r\n  index: number,\r\n  onCloseActions: () => void,\r\n  dispatch: (action: ActionTypes) => void\r\n) => {\r\n  dispatch(PlayCard(index));\r\n  onCloseActions();\r\n};\r\n\r\ninterface CardActionsProps {\r\n  index: number;\r\n  card: Card;\r\n  onCloseActions: () => void;\r\n  dispatch: (action: ActionTypes) => void;\r\n}\r\n\r\nconst containerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst buttonStyle = css`\r\n  flex: 1;\r\n  margin: 15px;\r\n`;\r\n\r\n/**\r\n * Actions to take on a card. Shown when the card is clicked.\r\n */\r\nconst CardActions: FunctionComponent<CardActionsProps> = ({\r\n  index,\r\n  card,\r\n  onCloseActions,\r\n  dispatch\r\n}) => {\r\n  const [showingEditModal, onChangeShowingEditModal] = useState(false);\r\n\r\n  return (\r\n    <div css={containerStyle}>\r\n      <Button\r\n        css={buttonStyle}\r\n        onClick={() => onPlayCard(index, onCloseActions, dispatch)}\r\n      >\r\n        Play\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={() => onChangeShowingEditModal(true)}>\r\n        Edit\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={onCloseActions}>\r\n        Cancel\r\n      </Button>\r\n      {showingEditModal && (\r\n        <EditCardModal\r\n          index={index}\r\n          card={card}\r\n          onCloseActions={onCloseActions}\r\n          onCloseEditCardModal={() => onChangeShowingEditModal(false)}\r\n          dispatch={dispatch}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardActions;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useContext, useState } from \"react\";\r\n\r\nimport { CardsContext } from \"../Hand\";\r\nimport { Card as CardType } from \"../types\";\r\n\r\nimport ConfidenceGrid from \"./ConfidenceGrid\";\r\nimport CardActions from \"./CardActions\";\r\n\r\ninterface CardProps {\r\n  index: number;\r\n}\r\n\r\nconst cardStyle = css`\r\n  transition: all 0.3s ease;\r\n  min-height: 250px;\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  margin: 5px;\r\n  background: radial-gradient(\r\n    circle,\r\n    rgb(63, 236, 251) 0%,\r\n    rgb(70, 88, 252) 95%,\r\n    rgb(174, 70, 252) 100%\r\n  );\r\n  box-shadow: 0 0 6px 0 rgba(157, 96, 212, 0.5);\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: all 0.5s ease;\r\n    box-shadow: 3px 3px 6px 0 rgba(157, 96, 212, 0.5);\r\n  }\r\n`;\r\n\r\n/**\r\n * Displays a card along with its info.\r\n * If clicked, the card shows options to play or edit it.\r\n */\r\nconst Card: FunctionComponent<CardProps> = ({ index }) => {\r\n  const [cards, dispatch] = useContext(CardsContext);\r\n  const [showingActions, setShowingActions] = useState(false);\r\n\r\n  const card = cards[index] as CardType;\r\n\r\n  return (\r\n    <div\r\n      role=\"button\"\r\n      css={cardStyle}\r\n      onClick={() => (!showingActions ? setShowingActions(true) : null)}\r\n    >\r\n      {!showingActions && <ConfidenceGrid card={card} />}\r\n      {showingActions && (\r\n        <CardActions\r\n          index={index}\r\n          card={card}\r\n          onCloseActions={() => setShowingActions(false)}\r\n          dispatch={dispatch}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport {\r\n  Dispatch,\r\n  SetStateAction,\r\n  FunctionComponent,\r\n  ChangeEvent\r\n} from \"react\";\r\n\r\nimport { Card } from \"../types\";\r\n\r\n/**\r\n * Called when a checkbox changes, updates the boolean array of selected cards\r\n * @param e Checkbox change event\r\n * @param selectedCards Boolean array of selected cards\r\n * @param setSelectedCards Function to set array of selected cards\r\n */\r\nconst onCheckboxChange = (\r\n  e: ChangeEvent<HTMLInputElement>,\r\n  selectedCards: boolean[],\r\n  setSelectedCards: Dispatch<SetStateAction<boolean[]>>\r\n) => {\r\n  setSelectedCards(\r\n    selectedCards.map((value, index) => {\r\n      // each checkbox has its index as a data attribute\r\n      if (`${index}` === e.target.dataset.index) {\r\n        return e.target.checked;\r\n      } else {\r\n        return value;\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst selectCardChecboxLabelStyle = css`\r\n  padding: 25px 20px;\r\n  border-radius: 5px;\r\n  border: 1px solid black;\r\n  margin-bottom: 5px;\r\n  background: radial-gradient(\r\n    circle,\r\n    rgb(63, 236, 251) 0%,\r\n    rgb(70, 88, 252) 95%,\r\n    rgb(174, 70, 252) 100%\r\n  );\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst selectCardCheckboxContainerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n`;\r\n\r\ninterface CardSelectionProps {\r\n  cards: Card[];\r\n  selectedCards: boolean[];\r\n  setSelectedCards: Dispatch<SetStateAction<boolean[]>>;\r\n}\r\n\r\nconst CardSelection: FunctionComponent<CardSelectionProps> = ({\r\n  cards,\r\n  selectedCards,\r\n  setSelectedCards\r\n}) => {\r\n  // create a checkbox for every card\r\n  const selectCardCheckboxes = [];\r\n  for (let i = 0; i < cards.length; i++) {\r\n    selectCardCheckboxes.push(\r\n      <div\r\n        key={`select-card-${i}`}\r\n        data-card-index={i}\r\n        css={selectCardCheckboxContainerStyle}\r\n      >\r\n        <label css={selectCardChecboxLabelStyle} htmlFor={`select-card-${i}`}>\r\n          {// +1 so that they render as 1,2,3,etc.\r\n          i + 1}\r\n        </label>\r\n        <input\r\n          id={`select-card-${i}`}\r\n          data-index={i}\r\n          type=\"checkbox\"\r\n          checked={selectedCards[i]}\r\n          onChange={e => onCheckboxChange(e, selectedCards, setSelectedCards)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        display: flex;\r\n      `}\r\n    >\r\n      {selectCardCheckboxes}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardSelection;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent, Dispatch, SetStateAction } from \"react\";\r\n\r\nconst labelStyle = css`\r\n  padding: 10px;\r\n  min-width: 50px;\r\n  display: inline-block;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\n/**\r\n * Render a radio button to choose a number/color for a hint\r\n * @param value Value of radio button\r\n * @param emoji Emoji to use for label\r\n * @param selectedNumberOrColor The currently selected number/color\r\n * @param setSelectedNumberOrColor Function to set the currently selected number/color\r\n */\r\nconst renderColorOrNumberRadioButton = (\r\n  value: string,\r\n  emoji: string,\r\n  selectedNumberOrColor: string,\r\n  setSelectedNumberOrColor: Dispatch<SetStateAction<string>>\r\n) => {\r\n  const id = `color-or-number-${value}`;\r\n  return (\r\n    <div>\r\n      <label htmlFor={id} css={labelStyle}>\r\n        {emoji}\r\n      </label>\r\n      <input\r\n        type=\"radio\"\r\n        id={id}\r\n        value={value}\r\n        name=\"color-or-number\"\r\n        checked={selectedNumberOrColor === value}\r\n        onChange={() => setSelectedNumberOrColor(value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst radioListStyle = css`\r\n  font-size: 30px;\r\n  display: flex;\r\n`;\r\n\r\ninterface ColorOrNumberRadioButtonsProps {\r\n  selectedNumberOrColor: string;\r\n  setSelectedNumberOrColor: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\n/**\r\n * Renders radio buttons to choose a number of a color for a hint\r\n */\r\nconst ColorOrNumberRadioButtons: FunctionComponent<\r\n  ColorOrNumberRadioButtonsProps\r\n> = ({ selectedNumberOrColor, setSelectedNumberOrColor }) => (\r\n  <div>\r\n    <div css={radioListStyle}>\r\n      {renderColorOrNumberRadioButton(\r\n        \"blue\",\r\n        \"🔷\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"yellow\",\r\n        \"💛\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"red\",\r\n        \"🔺\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"green\",\r\n        \"🍏\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"white\",\r\n        \"⬜\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n    </div>\r\n    <div css={radioListStyle}>\r\n      {renderColorOrNumberRadioButton(\r\n        \"one\",\r\n        \"1️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"two\",\r\n        \"2️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"three\",\r\n        \"3️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"four\",\r\n        \"4️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"five\",\r\n        \"5️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ColorOrNumberRadioButtons;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React, { FunctionComponent, useContext, useState } from \"react\";\r\n\r\nimport { CardsContext } from \"../Hand\";\r\nimport { GiveHint, ActionTypes } from \"../actions\";\r\nimport Modal from \"../Modal\";\r\nimport Footer from \"../Modal/Footer\";\r\n\r\nimport CardSelection from \"./CardSelection\";\r\nimport ColorOrNumberRadioButtons from \"./ColorOrNumberRadioButtons\";\r\n\r\nconst hintSelectionStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\n/**\r\n * Determine whether the given string is a number\r\n * @param selectedNumberOrColor String to check if it's a color\r\n */\r\nconst isNumber = (selectedNumberOrColor: string): boolean => {\r\n  switch (selectedNumberOrColor) {\r\n    case \"one\":\r\n    case \"two\":\r\n    case \"three\":\r\n    case \"four\":\r\n    case \"five\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Determine whether the given string is a color\r\n * @param selectedNumberOrColor String to check if it's a number\r\n */\r\nconst isColor = (selectedNumberOrColor: string): boolean => {\r\n  switch (selectedNumberOrColor) {\r\n    case \"blue\":\r\n    case \"yellow\":\r\n    case \"red\":\r\n    case \"green\":\r\n    case \"white\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param dispatch Function to dispatch an action\r\n * @param selectedCards Boolean array of selected cards\r\n * @param selectedNumberOrColor The selected number or color\r\n * @param closeModal Function to close the modal\r\n */\r\nconst dispatchHint = (\r\n  dispatch: (type: ActionTypes) => void,\r\n  selectedCards: boolean[],\r\n  selectedNumberOrColor: string,\r\n  closeModal: () => void\r\n) => {\r\n  // we have to convert from boolean array -> index array\r\n  // since that's what the reducer uses to apply the hint\r\n  const selectedIndices: number[] = [];\r\n\r\n  selectedCards.forEach((isChecked, index) =>\r\n    isChecked ? selectedIndices.push(index) : null\r\n  );\r\n\r\n  // figure out if the player selected a color or a number\r\n  const selectedColor = isColor(selectedNumberOrColor)\r\n    ? selectedNumberOrColor\r\n    : undefined;\r\n  const selectedNumber = isNumber(selectedNumberOrColor)\r\n    ? selectedNumberOrColor\r\n    : undefined;\r\n\r\n  // dispatch the hint and close the modal\r\n  dispatch(GiveHint(selectedIndices, selectedColor, selectedNumber));\r\n  closeModal();\r\n};\r\n\r\ninterface GiveHintModalProps {\r\n  closeModal: () => void;\r\n}\r\n\r\n/**\r\n * A modal to give a hint to the player\r\n */\r\nconst GiveHintModal: FunctionComponent<GiveHintModalProps> = ({\r\n  closeModal\r\n}) => {\r\n  // grab cards and dispatch from the card context\r\n  const [cards, dispatch] = useContext(CardsContext);\r\n\r\n  // boolean array to drive the selected card checkboxes\r\n  const [selectedCards, setSelectedCards] = useState<boolean[]>(\r\n    Array(cards.length).fill(false)\r\n  );\r\n\r\n  // string to drive the radio button for color/number\r\n  const [selectedNumberOrColor, setSelectedNumberOrColor] = useState<string>(\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <Modal>\r\n      <React.Fragment>\r\n        <h1>Give Hint</h1>\r\n\r\n        {/* Checkboxes and radio buttons to select cards and color/number */}\r\n        <div css={hintSelectionStyle}>\r\n          <CardSelection\r\n            cards={cards}\r\n            selectedCards={selectedCards}\r\n            setSelectedCards={setSelectedCards}\r\n          />\r\n          <ColorOrNumberRadioButtons\r\n            selectedNumberOrColor={selectedNumberOrColor}\r\n            setSelectedNumberOrColor={setSelectedNumberOrColor}\r\n          />\r\n        </div>\r\n\r\n        {/* Footer to either apply hint or cancel */}\r\n        <Footer\r\n          onCloseClick={closeModal}\r\n          onConfirmClick={() =>\r\n            dispatchHint(\r\n              dispatch,\r\n              selectedCards,\r\n              selectedNumberOrColor,\r\n              closeModal\r\n            )\r\n          }\r\n        />\r\n      </React.Fragment>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default GiveHintModal;\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport Modal from \"./Modal\";\r\nimport Footer from \"./Modal/Footer\";\r\n\r\ninterface OptionsModalProps {\r\n  onCloseOptionsModal: () => void;\r\n}\r\n\r\n/**\r\n * Modal for varioud options\r\n */\r\nconst OptionsModal: FunctionComponent<OptionsModalProps> = ({\r\n  onCloseOptionsModal\r\n}) => {\r\n  return (\r\n    <Modal>\r\n      <h1>Options</h1>\r\n      <Footer onCloseClick={onCloseOptionsModal} onConfirmClick={() => {}} />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default OptionsModal;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport OptionsModal from \"./OptionsModal\";\r\n\r\ninterface FooterProps {\r\n  setShowingGiveHintModal: (showingGiveHintModal: boolean) => void;\r\n}\r\n\r\nconst containerStyle = css`\r\n  grid-row: 2;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst buttonStyle = css`\r\n  height: 90%;\r\n  width: 25%;\r\n`;\r\n\r\n/** The main footer for the app */\r\nconst Footer: FunctionComponent<FooterProps> = ({\r\n  setShowingGiveHintModal\r\n}) => {\r\n  const [showingOptionsModal, setShowingOptionsModal] = useState(false);\r\n  return (\r\n    <div css={containerStyle}>\r\n      <Button css={buttonStyle} onClick={() => setShowingOptionsModal(true)}>\r\n        Options\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={() => setShowingGiveHintModal(true)}>\r\n        Give Hint\r\n      </Button>\r\n\r\n      {showingOptionsModal && (\r\n        <OptionsModal\r\n          onCloseOptionsModal={() => setShowingOptionsModal(false)}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport {\r\n  FunctionComponent,\r\n  useReducer,\r\n  createContext,\r\n  Context,\r\n  useState\r\n} from \"react\";\r\n\r\nimport CardsReducer, { getInitialState } from \"./CardsReducer\";\r\nimport Card from \"./Card\";\r\nimport GiveHintModal from \"./GiveHintModal\";\r\nimport Footer from \"./Footer\";\r\nimport { ActionTypes } from \"./actions\";\r\nimport { Card as CardType } from \"./types\";\r\n\r\n// this initial state and context are created on first render\r\nlet initialState: CardType[];\r\nexport let CardsContext: Context<[CardType[], ((action: ActionTypes) => void)]>;\r\n\r\n/**\r\n *\r\n * @param numberOfCards How many cards are in the player's hand\r\n *  Cards pull their state from the context\r\n */\r\nconst renderCards = (numberOfCards: number) => {\r\n  const cards: JSX.Element[] = [];\r\n\r\n  for (let i = 0; i < numberOfCards; i++) {\r\n    cards.push(<Card index={i} key={`card-${i}`} />);\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\nconst mainContainerStyle = css`\r\n  display: grid;\r\n  grid-template-rows: 5fr 1fr;\r\n  height: 100%;\r\n`;\r\n\r\nconst cardsContainerStyle = css`\r\n  grid-row: 1;\r\n  display: grid;\r\n`;\r\n\r\ninterface HandProps {\r\n  numberOfCards: number;\r\n}\r\n\r\n/** Renders all of the cards in the player's hand */\r\nconst Hand: FunctionComponent<HandProps> = ({ numberOfCards }) => {\r\n  // create our initial state and context if we haven't yet\r\n  if (!initialState || !CardsContext) {\r\n    initialState = getInitialState(numberOfCards);\r\n    CardsContext = createContext<[CardType[], ((action: ActionTypes) => void)]>(\r\n      [initialState, (action: ActionTypes) => {}]\r\n    );\r\n  }\r\n\r\n  const [showingGiveHintModal, setShowingGiveHintModal] = useState(false);\r\n\r\n  // one column for every card\r\n  const cardsGrid = css`\r\n    ${cardsContainerStyle}\r\n    grid-template-columns: repeat(${numberOfCards}, 1fr);\r\n  `;\r\n\r\n  return (\r\n    <div css={mainContainerStyle}>\r\n      {/*\r\n        By putting the result of useReducer as the value of the provider,\r\n        the current state and the dispatch function are available to anything using the context\r\n      */}\r\n      <CardsContext.Provider value={useReducer(CardsReducer, initialState)}>\r\n        <div css={cardsGrid}>{renderCards(numberOfCards)}</div>\r\n        <Footer setShowingGiveHintModal={setShowingGiveHintModal} />\r\n        {showingGiveHintModal && (\r\n          <GiveHintModal closeModal={() => setShowingGiveHintModal(false)} />\r\n        )}\r\n      </CardsContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hand;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState } from \"react\";\r\n\r\nimport Hand from \"./Hand\";\r\nimport Button from \"./Button\";\r\n\r\nconst mainContainerStyle = css`\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  color: white;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(50, 255, 57, 1) 0%,\r\n    rgba(137, 196, 255, 1) 100%\r\n  );\r\n`;\r\n\r\nconst numberOfCardsContainerStyle = css`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  max-width: 500px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-top: 15%;\r\n`;\r\n\r\nconst numberOfCardsButtonStyle = css`\r\n  padding: 25px;\r\n`;\r\n\r\nconst titleStyle = css`\r\n  margin: 0;\r\n`;\r\n\r\n/**\r\n * Renders the current hand if the player has selected the number of cards,\r\n * or buttons to select the number of cards if they haven't\r\n */\r\nconst App: FunctionComponent = () => {\r\n  const [numberOfCards, setNumberOfCards] = useState(-1);\r\n\r\n  return (\r\n    <div css={mainContainerStyle}>\r\n      {/* Haven't select the number of cards yet, show buttons to do so */}\r\n      {numberOfCards < 0 && (\r\n        <div>\r\n          <h1 css={titleStyle}>火薬</h1>\r\n          <h2>Kayaku</h2>\r\n          <h3>How many cards?</h3>\r\n          <div css={numberOfCardsContainerStyle}>\r\n            <Button\r\n              css={numberOfCardsButtonStyle}\r\n              onClick={() => setNumberOfCards(4)}\r\n            >\r\n              4\r\n            </Button>\r\n            <Button\r\n              css={numberOfCardsButtonStyle}\r\n              onClick={() => setNumberOfCards(5)}\r\n            >\r\n              5\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Have selected the number of cards, show the hand */}\r\n      {numberOfCards > 0 && <Hand numberOfCards={numberOfCards} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// Register the service worker to make this a progressive web app\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}