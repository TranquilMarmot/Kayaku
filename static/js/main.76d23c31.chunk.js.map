{"version":3,"sources":["types.ts","actions.ts","CardsReducer.ts","Card/ConfidenceGrid/Confidence.tsx","Card/ConfidenceGrid/Info.tsx","Card/ConfidenceGrid/index.tsx","Button.tsx","Modal/index.tsx","Modal/Footer.tsx","Card/EditCardModal/ConfidenceDropdown.tsx","Card/EditCardModal/index.tsx","Card/CardActions.tsx","Card/index.tsx","GiveHintModal/CardSelection.tsx","GiveHintModal/ColorOrNumberRadioButtons.tsx","GiveHintModal/index.tsx","OptionsModal.tsx","Footer.tsx","Hand.tsx","MainMenu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Confidence","Actions","MoveCardDirection","createCard","color","blue","Unknown","yellow","red","green","white","number","one","two","three","four","five","getInitialState","numberOfCards","cards","i","push","reducer","state","action","type","GiveHint","hand","indices","map","card","index","inHint","includes","Positive","Negative","giveHint","PlayCard","cardsMinusPlayed","splice","playCard","MoveCard","destinationIndex","direction","LEFT","length","clone","destinationCard","thisCard","moveCard","EditCard","editCard","newState","localStorage","setItem","JSON","stringify","confidence","ConfidenceType","role","aria-label","infoStyle","row","column","css","Info","infoType","infoKey","emoji","Fragment","confidenceGridContainerStyle","confidenceGridStyle","ConfidenceGrid","buttonStyle","Button","props","children","baseModalBackground","baseModalContent","Modal","footerStyle","footerButtonStyle","Footer","onCloseClick","onConfirmClick","onClick","emojiStyle","ConfidenceDropdown","onChange","dropdownType","dropdownKey","dropdownId","currentConfidence","htmlFor","id","e","key","value","setCardValue","target","defaultValue","onSaveCard","onCloseEditCardModal","dispatch","onCloseActions","dropdownContainerStyle","EditCardModal","useState","editedCard","onEditedCardChange","onPlayCard","onMoveCard","containerStyle","arrowContainerStyle","CardActions","showingEditModal","onChangeShowingEditModal","RIGHT","cardStyle","Card","useContext","CardsContext","showingActions","setShowingActions","onCheckboxChange","selectedCards","setSelectedCards","dataset","checked","selectCardChecboxLabelStyle","selectCardCheckboxContainerStyle","CardSelection","selectCardCheckboxes","data-card-index","data-index","labelStyle","renderColorOrNumberRadioButton","selectedNumberOrColor","setSelectedNumberOrColor","name","radioListStyle","ColorOrNumberRadioButtons","hintSelectionStyle","dispatchHint","closeModal","selectedIndices","forEach","isChecked","selectedColor","isColor","undefined","selectedNumber","isNumber","GiveHintModal","Array","fill","newGameButtonStyle","OptionsModal","onCloseOptionsModal","onClearHand","setShowingGiveHintModal","clearHand","showingOptionsModal","setShowingOptionsModal","mainContainerStyle","cardsContainerStyle","Hand","initialState","createContext","showingGiveHintModal","cardsGrid","Provider","useReducer","CardsReducer","renderCards","numberOfCardsContainerStyle","numberOfCardsButtonStyle","titleStyle","MainMenu","setHand","App","useEffect","currentGame","getItem","parse","removeItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.76d23c31.chunk.js","sourcesContent":["/** Confidenve level for a color or number */\r\nexport enum Confidence {\r\n  Unknown = \"unknown\",\r\n  Positive = \"positive\",\r\n  Negative = \"negative\"\r\n}\r\n\r\n/** Represents a card in the player's hand, which has confidence levels for color and number */\r\nexport interface Card {\r\n  color: {\r\n    blue: Confidence;\r\n    yellow: Confidence;\r\n    red: Confidence;\r\n    green: Confidence;\r\n    white: Confidence;\r\n    [key: string]: Confidence;\r\n  };\r\n  number: {\r\n    one: Confidence;\r\n    two: Confidence;\r\n    three: Confidence;\r\n    four: Confidence;\r\n    five: Confidence;\r\n    [key: string]: Confidence;\r\n  };\r\n  [key: string]: object;\r\n}\r\n","import { Card } from \"./types\";\r\n\r\n/** List of action types */\r\nexport enum Actions {\r\n  GiveHint = \"GiveHint\",\r\n  PlayCard = \"PlayCard\",\r\n  EditCard = \"EditCard\",\r\n  MoveCard = \"MoveCard\"\r\n}\r\n\r\n/** Base Action interface that all Actions extend */\r\ninterface Action {\r\n  type: Actions;\r\n}\r\n\r\n/** Give the player a hint about multiple cards */\r\nexport interface GiveHintAction extends Action {\r\n  indices: number[];\r\n  color?: string;\r\n  number?: string;\r\n}\r\n\r\n/**\r\n * Give the player a hint about multiple cards.\r\n * This should have either number or color, but never both.\r\n * @param indices Indices to give hint about\r\n * @param color Color that this hint is about\r\n * @param number Number that this hint is about\r\n */\r\nexport const GiveHint = (\r\n  indices: number[],\r\n  color?: string,\r\n  number?: string\r\n): GiveHintAction => ({\r\n  type: Actions.GiveHint,\r\n  indices,\r\n  color,\r\n  number\r\n});\r\n\r\n/** Play a card at a specific index */\r\nexport interface PlayCardAction extends Action {\r\n  index: number;\r\n}\r\n\r\n/**\r\n * Play a card at a specific index\r\n * @param index Index of card to play\r\n */\r\nexport const PlayCard = (index: number) => ({\r\n  type: Actions.PlayCard,\r\n  index\r\n});\r\n\r\n/** Possible directions to move a card */\r\nexport enum MoveCardDirection {\r\n  LEFT,\r\n  RIGHT\r\n}\r\n\r\n/** Move a card left or right in the hand */\r\nexport interface MoveCardAction extends Action {\r\n  index: number;\r\n  direction: MoveCardDirection;\r\n}\r\n\r\n/**\r\n * Move a card left or right in the hand\r\n * @param index Index of card to move\r\n * @param direction Direction to move card in\r\n */\r\nexport const MoveCard = (index: number, direction: MoveCardDirection) => ({\r\n  type: Actions.MoveCard,\r\n  index,\r\n  direction\r\n});\r\n\r\n/** Edit a card at a specific index */\r\nexport interface EditCardAction extends Action {\r\n  index: number;\r\n  card: Card;\r\n}\r\n\r\n/**\r\n * Edit (replace) a card at a given index\r\n * @param index Index of card to edit\r\n * @param card Updated card\r\n */\r\nexport const EditCard = (index: number, card: Card) => ({\r\n  type: Actions.EditCard,\r\n  index,\r\n  card\r\n});\r\n\r\n/** All action types */\r\nexport type ActionTypes =\r\n  | GiveHintAction\r\n  | PlayCardAction\r\n  | EditCardAction\r\n  | MoveCardAction;\r\n","import { Card, Confidence } from \"./types\";\r\nimport {\r\n  Actions,\r\n  ActionTypes,\r\n  GiveHintAction,\r\n  PlayCardAction,\r\n  EditCardAction,\r\n  MoveCardAction,\r\n  MoveCardDirection\r\n} from \"./actions\";\r\n\r\n/** Creates a card with empty (unknown) confidence for everything */\r\nconst createCard = (): Card => ({\r\n  color: {\r\n    blue: Confidence.Unknown,\r\n    yellow: Confidence.Unknown,\r\n    red: Confidence.Unknown,\r\n    green: Confidence.Unknown,\r\n    white: Confidence.Unknown\r\n  },\r\n  number: {\r\n    one: Confidence.Unknown,\r\n    two: Confidence.Unknown,\r\n    three: Confidence.Unknown,\r\n    four: Confidence.Unknown,\r\n    five: Confidence.Unknown\r\n  }\r\n});\r\n\r\n/**\r\n * Create a hand with the given number of empty cards\r\n * @param numberOfCards Number of cards in hand\r\n */\r\nexport const getInitialState = (numberOfCards: number): Card[] => {\r\n  const cards: Card[] = [];\r\n\r\n  for (let i = 0; i < numberOfCards; i++) {\r\n    cards.push(createCard());\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\n/**\r\n * Gives a hint to the player.\r\n * The hint contains a list of indices in the hand, and the color or number for the hint.\r\n * This will set the confidence to positive for the color/number for the given indices,\r\n * and set the confidence to negative for all other indices\r\n * @param hand Hand to apply hint to\r\n * @param action Action containing hint being given\r\n */\r\nconst giveHint = (\r\n  hand: Card[],\r\n  { indices, color, number }: GiveHintAction\r\n): Card[] =>\r\n  hand.map((card, index) => {\r\n    // check if this card is in the hint\r\n    // if it is, the confidence is positive\r\n    // otherwise it's negative\r\n    const inHint = indices.includes(index);\r\n\r\n    // hint is about a color\r\n    if (color) {\r\n      return {\r\n        ...card,\r\n        color: {\r\n          ...card.color,\r\n          [color]: inHint ? Confidence.Positive : Confidence.Negative\r\n        }\r\n      };\r\n    }\r\n\r\n    // hint it about a number\r\n    if (number) {\r\n      return {\r\n        ...card,\r\n        number: {\r\n          ...card.number,\r\n          [number]: inHint ? Confidence.Positive : Confidence.Negative\r\n        }\r\n      };\r\n    }\r\n\r\n    // neither color or number (tehcnically an invalid hint)\r\n    return card;\r\n  });\r\n\r\n/**\r\n * This will remove the given card and replace it with a new, blank card.\r\n * This assumes that new cards are added to the right side of the hand.\r\n * @param hand Player's current hand\r\n * @param action Action containing the card being played\r\n */\r\nconst playCard = (hand: Card[], { index }: PlayCardAction): Card[] => {\r\n  // clone the hand\r\n  const cardsMinusPlayed = [...hand];\r\n\r\n  // filter out the card we just played\r\n  cardsMinusPlayed.splice(index, 1);\r\n\r\n  // add a new card\r\n  cardsMinusPlayed.push(createCard());\r\n  return cardsMinusPlayed;\r\n};\r\n\r\n/**\r\n * Moves a card left or right in the player's hand\r\n * @param hand Player's current hand\r\n * @param action Action containing which direction to move a card\r\n */\r\nconst moveCard = (\r\n  hand: Card[],\r\n  { index, direction }: MoveCardAction\r\n): Card[] => {\r\n  let destinationIndex =\r\n    direction === MoveCardDirection.LEFT ? index - 1 : index + 1;\r\n\r\n  // rotate around the start/end of the hand\r\n  if (destinationIndex === hand.length) {\r\n    destinationIndex = 0;\r\n  } else if (destinationIndex === -1) {\r\n    destinationIndex = hand.length - 1;\r\n  }\r\n\r\n  // doing this the cheap and dirty way since this is a small array and\r\n  // algorithms just make this way too complex\r\n  const clone = [...hand];\r\n\r\n  const destinationCard = { ...clone[destinationIndex] };\r\n  const thisCard = { ...clone[index] };\r\n\r\n  clone[index] = destinationCard;\r\n  clone[destinationIndex] = thisCard;\r\n\r\n  return clone;\r\n};\r\n\r\n/**\r\n * Edits (replaces) a card in the player's hand\r\n * @param hand Player's current hand\r\n * @param action Action containing index of card to edit\r\n */\r\nconst editCard = (hand: Card[], action: EditCardAction): Card[] =>\r\n  hand.map((card, index) => {\r\n    if (index === action.index) {\r\n      return action.card;\r\n    }\r\n\r\n    return card;\r\n  });\r\n\r\n/**\r\n * Actual reducer\r\n * @param state State to reduce\r\n * @param action Action to reduce with\r\n */\r\nconst reducer = (state: Card[], action: ActionTypes): Card[] => {\r\n  switch (action.type) {\r\n    case Actions.GiveHint:\r\n      return giveHint(state, action as GiveHintAction);\r\n    case Actions.PlayCard:\r\n      return playCard(state, action as PlayCardAction);\r\n    case Actions.MoveCard:\r\n      return moveCard(state, action as MoveCardAction);\r\n    case Actions.EditCard:\r\n      return editCard(state, action as EditCardAction);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/**\r\n * Applies the given action to the given state and returns the new state.\r\n *\r\n * Also saves the current state as the \"currentGame\" item in localStorage.\r\n * This is so if the app is closed, it will re-open with the most recent state.\r\n */\r\nexport default (state: Card[], action: ActionTypes): Card[] => {\r\n  const newState = reducer(state, action);\r\n\r\n  localStorage.setItem(\"currentGame\", JSON.stringify(newState));\r\n\r\n  return newState;\r\n};\r\n","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport { Confidence as ConfidenceType } from \"../../types\";\r\n\r\ninterface ConfidenceProps {\r\n  confidence: ConfidenceType;\r\n}\r\n\r\n/**\r\n * Renders the given confidence\r\n */\r\nconst Confidence: FunctionComponent<ConfidenceProps> = ({ confidence }) => {\r\n  switch (confidence) {\r\n    case ConfidenceType.Positive:\r\n      return (\r\n        <span role=\"img\" aria-label=\"positive\">\r\n          ✔\r\n        </span>\r\n      );\r\n    case ConfidenceType.Negative:\r\n      return (\r\n        <span role=\"img\" aria-label=\"negative\">\r\n          ❌\r\n        </span>\r\n      );\r\n    case ConfidenceType.Unknown:\r\n    default:\r\n      return <span />;\r\n  }\r\n};\r\n\r\nexport default Confidence;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { FunctionComponent } from \"react\";\r\n\r\nimport { Card } from \"../../types\";\r\n\r\nimport Confidence from \"./Confidence\";\r\n\r\ninterface InfoProps {\r\n  card: Card;\r\n  infoType: \"color\" | \"number\";\r\n  infoKey: string;\r\n  emoji: string;\r\n  row: number;\r\n}\r\n\r\nconst infoStyle = (row: number, column: number) => css`\r\n  grid-row: ${row};\r\n  grid-column: ${column};\r\n  border-right: 1px solid black;\r\n  border-bottom: 1px solid gray;\r\n  border-top: 1px solid gray;\r\n`;\r\n\r\n/**\r\n * Renders the confidence level for the given card and type\r\n */\r\nconst Info: FunctionComponent<InfoProps> = ({\r\n  card,\r\n  infoType,\r\n  infoKey,\r\n  emoji,\r\n  row\r\n}) => (\r\n  <React.Fragment>\r\n    <div css={infoStyle(row, 1)}>\r\n      <span role=\"img\" aria-label={`${infoKey}`}>\r\n        {emoji}\r\n      </span>\r\n    </div>\r\n    <div css={infoStyle(row, 2)}>\r\n      <Confidence confidence={card[infoType][infoKey]} />\r\n    </div>\r\n  </React.Fragment>\r\n);\r\n\r\nexport default Info;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport { Card } from \"../../types\";\r\n\r\nimport Info from \"./Info\";\r\n\r\nconst confidenceGridContainerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 97%;\r\n  margin-top: 3%;\r\n`;\r\n\r\nconst confidenceGridStyle = css`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\r\n  font-size: 20px;\r\n  flex: 1;\r\n`;\r\n\r\ninterface ConfidenceGridProps {\r\n  card: Card;\r\n}\r\n\r\n/**\r\n * A grid that displays the confidence level for every color and number of a card.\r\n */\r\nconst ConfidenceGrid: FunctionComponent<ConfidenceGridProps> = ({ card }) => {\r\n  return (\r\n    <div css={confidenceGridContainerStyle}>\r\n      <div css={confidenceGridStyle}>\r\n        <Info card={card} infoType=\"color\" infoKey=\"blue\" emoji=\"🔷\" row={1} />\r\n        <Info\r\n          card={card}\r\n          infoType=\"color\"\r\n          infoKey=\"yellow\"\r\n          emoji=\"💛\"\r\n          row={2}\r\n        />\r\n        <Info card={card} infoType=\"color\" infoKey=\"red\" emoji=\"🔺\" row={3} />\r\n        <Info card={card} infoType=\"color\" infoKey=\"green\" emoji=\"🍏\" row={4} />\r\n        <Info card={card} infoType=\"color\" infoKey=\"white\" emoji=\"⬜\" row={5} />\r\n      </div>\r\n      <div css={confidenceGridStyle}>\r\n        <Info card={card} infoType=\"number\" infoKey=\"one\" emoji=\"1️⃣\" row={1} />\r\n        <Info card={card} infoType=\"number\" infoKey=\"two\" emoji=\"2️⃣\" row={2} />\r\n        <Info\r\n          card={card}\r\n          infoType=\"number\"\r\n          infoKey=\"three\"\r\n          emoji=\"3️⃣\"\r\n          row={3}\r\n        />\r\n        <Info card={card} infoType=\"number\" infoKey=\"four\" emoji=\"4️⃣\" row={4} />\r\n        <Info card={card} infoType=\"number\" infoKey=\"five\" emoji=\"5️⃣\" row={5} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfidenceGrid;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\ninterface ButtonProps {\r\n  children: string | JSX.Element;\r\n  disabled?: boolean;\r\n  onClick: () => void;\r\n}\r\n\r\nconst buttonStyle = css`\r\n  transition: all 0.3s ease;\r\n  border-radius: 10px;\r\n  padding: 10px 15px;\r\n  box-shadow: 0 0 6px 0 rgba(157, 96, 212, 0.5);\r\n  border: solid 2px transparent;\r\n  background-image: linear-gradient(\r\n      rgba(255, 255, 255, 0),\r\n      rgba(255, 255, 255, 0)\r\n    ),\r\n    linear-gradient(135deg, #ff0000 0%, #0000ff 50%, #ffff00 100%);\r\n  color: #00ff00;\r\n  font-weight: 800;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: all 0.5s ease;\r\n    box-shadow: 3px 3px 6px 0 rgba(157, 96, 212, 0.5);\r\n  }\r\n`;\r\n\r\n/**\r\n * Reusable button component with fancy rainbow effect\r\n */\r\nconst Button: FunctionComponent<ButtonProps> = props => {\r\n  const { children } = props;\r\n  return (\r\n    <button css={buttonStyle} {...props}>\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nconst baseModalBackground = css`\r\n  position: fixed; /* Stay in place */\r\n  z-index: 1000; /* Sit on top */\r\n  padding-top: 10px; /* Location of the box */\r\n  left: 0;\r\n  top: 0;\r\n  width: 100%; /* Full width */\r\n  height: 100%; /* Full height */\r\n  overflow: auto; /* Enable scroll if needed */\r\n  background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */\r\n`;\r\n\r\nconst baseModalContent = css`\r\n  margin: auto;\r\n  border: 1px solid #888;\r\n  width: 80%;\r\n  color: black;\r\n  background: linear-gradient(\r\n    315deg,\r\n    rgba(137, 196, 255, 1) 0%,\r\n    rgba(50, 255, 57, 1) 100%\r\n  );\r\n`;\r\n\r\n/**\r\n * Generic reusable modal component\r\n */\r\nconst Modal: FunctionComponent = ({ children }) => (\r\n  <div css={baseModalBackground}>\r\n    <div css={baseModalContent}>{children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Modal;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport Button from \"../Button\";\r\n\r\nconst footerStyle = css`\r\n  border-top: 2px solid grey;\r\n  padding: 10px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst footerButtonStyle = css`\r\n  padding: 15px 20px;\r\n  width: 100px;\r\n`;\r\n\r\ninterface FooterProps {\r\n  /** Function to call when close button is clicked (should close the modal...) If this is not passed in, the close button will not be shown. */\r\n  onCloseClick?: () => void;\r\n\r\n  /** Function to call when confirming the modal. If this is not passed in, the confirm button will not be shown. */\r\n  onConfirmClick?: () => void;\r\n}\r\n\r\n/**\r\n * Footer for a Modal that has Cancel and Apply buttons\r\n */\r\nconst Footer: FunctionComponent<FooterProps> = ({\r\n  onCloseClick,\r\n  onConfirmClick\r\n}) => (\r\n  <div css={footerStyle}>\r\n    {onCloseClick && (\r\n      <Button css={footerButtonStyle} onClick={onCloseClick}>\r\n        Cancel\r\n      </Button>\r\n    )}\r\n    {onConfirmClick && (\r\n      <Button css={footerButtonStyle} onClick={onConfirmClick}>\r\n        Apply\r\n      </Button>\r\n    )}\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, Dispatch, SetStateAction } from \"react\";\r\n\r\nimport { Card, Confidence } from \"../../types\";\r\n\r\nconst setCardValue = (\r\n  card: Card,\r\n  type: string,\r\n  key: string,\r\n  value: Confidence\r\n): Card => {\r\n  return {\r\n    ...card,\r\n    [type]: {\r\n      ...card[type],\r\n      [key]: value\r\n    }\r\n  };\r\n};\r\n\r\nconst emojiStyle = css`\r\n  font-size: 30px;\r\n  padding: 10px;\r\n  min-width: 50px;\r\n  display: inline-block;\r\n`;\r\n\r\ninterface ConfidenceDropdownProps {\r\n  onChange: Dispatch<SetStateAction<Card>>;\r\n  card: Card;\r\n  dropdownType: \"color\" | \"number\";\r\n  dropdownKey: string;\r\n  emoji: string;\r\n}\r\n\r\n/**\r\n * Render a dropdown to choose the confidence level of a color or number for a card\r\n */\r\nconst ConfidenceDropdown: FunctionComponent<ConfidenceDropdownProps> = ({\r\n  onChange,\r\n  card,\r\n  dropdownType,\r\n  dropdownKey,\r\n  emoji\r\n}) => {\r\n  const dropdownId = `dropdown-${dropdownType}-${dropdownKey}`;\r\n\r\n  const currentConfidence = card[dropdownType][dropdownKey];\r\n\r\n  return (\r\n    <div>\r\n      <label htmlFor={dropdownId}>\r\n        <span css={emojiStyle} role=\"img\" aria-label={`${dropdownKey}`}>\r\n          {emoji}\r\n        </span>\r\n      </label>\r\n      <select\r\n        id={dropdownId}\r\n        onChange={e =>\r\n          onChange(\r\n            setCardValue(card, dropdownType, dropdownKey, e.target\r\n              .value as Confidence)\r\n          )\r\n        }\r\n        defaultValue={currentConfidence}\r\n      >\r\n        <option value={Confidence.Unknown}> </option>\r\n        <option value={Confidence.Positive}>\r\n          {/* eslint-ignore jsx-a11y/accessible-emoji */}✔\r\n        </option>\r\n        <option value={Confidence.Negative}>\r\n          {/* eslint-ignore jsx-a11y/accessible-emoji */}❌\r\n        </option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfidenceDropdown;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport React, { FunctionComponent, useState } from \"react\";\r\n\r\nimport Modal from \"../../Modal\";\r\nimport Footer from \"../../Modal/Footer\";\r\nimport { Card } from \"../../types\";\r\nimport { ActionTypes, EditCard } from \"../../actions\";\r\n\r\nimport ConfidenceDropdown from \"./ConfidenceDropdown\";\r\n\r\nconst onSaveCard = (\r\n  card: Card,\r\n  index: number,\r\n  onCloseEditCardModal: () => void,\r\n  dispatch: (action: ActionTypes) => void,\r\n  onCloseActions: () => void\r\n) => {\r\n  dispatch(EditCard(index, card));\r\n  onCloseEditCardModal();\r\n  onCloseActions();\r\n};\r\n\r\nconst dropdownContainerStyle = css`\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\ninterface EditCardModalProps {\r\n  index: number;\r\n  card: Card;\r\n  onCloseEditCardModal: () => void;\r\n  dispatch: (action: ActionTypes) => void;\r\n  onCloseActions: () => void;\r\n}\r\n\r\n/**\r\n * Renders a modal to edit the current confidence values of a card\r\n */\r\nconst EditCardModal: FunctionComponent<EditCardModalProps> = ({\r\n  index,\r\n  card,\r\n  onCloseEditCardModal,\r\n  dispatch,\r\n  onCloseActions\r\n}) => {\r\n  const [editedCard, onEditedCardChange] = useState(card);\r\n\r\n  return (\r\n    <Modal>\r\n      <React.Fragment>\r\n        <h1>Edit Card</h1>\r\n        <div css={dropdownContainerStyle}>\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"blue\"\r\n            emoji=\"🔷\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"yellow\"\r\n            emoji=\"💛\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"red\"\r\n            emoji=\"🔺\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"green\"\r\n            emoji=\"🍏\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"color\"\r\n            dropdownKey=\"white\"\r\n            emoji=\"⬜\"\r\n          />\r\n        </div>\r\n        <div css={dropdownContainerStyle}>\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"one\"\r\n            emoji=\"1️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"two\"\r\n            emoji=\"2️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"three\"\r\n            emoji=\"3️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"four\"\r\n            emoji=\"4️⃣\"\r\n          />\r\n          <ConfidenceDropdown\r\n            onChange={onEditedCardChange}\r\n            card={editedCard}\r\n            dropdownType=\"number\"\r\n            dropdownKey=\"five\"\r\n            emoji=\"5️⃣\"\r\n          />\r\n        </div>\r\n        <Footer\r\n          onCloseClick={onCloseEditCardModal}\r\n          onConfirmClick={() =>\r\n            onSaveCard(\r\n              editedCard,\r\n              index,\r\n              onCloseEditCardModal,\r\n              dispatch,\r\n              onCloseActions\r\n            )\r\n          }\r\n        />\r\n      </React.Fragment>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditCardModal;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState } from \"react\";\r\n\r\nimport Button from \"../Button\";\r\nimport { ActionTypes, PlayCard, MoveCard, MoveCardDirection } from \"../actions\";\r\nimport { Card } from \"../types\";\r\n\r\nimport EditCardModal from \"./EditCardModal\";\r\n\r\n/**\r\n * Called when a card is played. Dispatches an action to the reducer and closes the actions on the card.\r\n * @param index Index of card to play\r\n * @param onCloseActions Function to call to close the actions\r\n * @param dispatch Function to dispatch to reducer\r\n */\r\nconst onPlayCard = (\r\n  index: number,\r\n  onCloseActions: () => void,\r\n  dispatch: (action: ActionTypes) => void\r\n) => {\r\n  dispatch(PlayCard(index));\r\n  onCloseActions();\r\n};\r\n\r\nconst onMoveCard = (\r\n  index: number,\r\n  direction: MoveCardDirection,\r\n  onCloseActions: () => void,\r\n\r\n  dispatch: (action: ActionTypes) => void\r\n) => {\r\n  dispatch(MoveCard(index, direction));\r\n  onCloseActions();\r\n};\r\n\r\ninterface CardActionsProps {\r\n  index: number;\r\n  card: Card;\r\n  onCloseActions: () => void;\r\n  dispatch: (action: ActionTypes) => void;\r\n}\r\n\r\nconst containerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nconst buttonStyle = css`\r\n  flex: 1;\r\n  margin: 15px;\r\n`;\r\n\r\nconst arrowContainerStyle = css`\r\n  display: flex;\r\n`;\r\n\r\n/**\r\n * Actions to take on a card. Shown when the card is clicked.\r\n */\r\nconst CardActions: FunctionComponent<CardActionsProps> = ({\r\n  index,\r\n  card,\r\n  onCloseActions,\r\n  dispatch\r\n}) => {\r\n  const [showingEditModal, onChangeShowingEditModal] = useState(false);\r\n\r\n  return (\r\n    <div css={containerStyle}>\r\n      <Button\r\n        css={buttonStyle}\r\n        onClick={() => onPlayCard(index, onCloseActions, dispatch)}\r\n      >\r\n        Play\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={() => onChangeShowingEditModal(true)}>\r\n        Edit\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={onCloseActions}>\r\n        Cancel\r\n      </Button>\r\n      <div css={arrowContainerStyle}>\r\n        <Button\r\n          css={buttonStyle}\r\n          onClick={() =>\r\n            onMoveCard(index, MoveCardDirection.LEFT, onCloseActions, dispatch)\r\n          }\r\n        >\r\n          ⬅\r\n        </Button>\r\n        <Button\r\n          css={buttonStyle}\r\n          onClick={() =>\r\n            onMoveCard(index, MoveCardDirection.RIGHT, onCloseActions, dispatch)\r\n          }\r\n        >\r\n          ➡\r\n        </Button>\r\n      </div>\r\n      {showingEditModal && (\r\n        <EditCardModal\r\n          index={index}\r\n          card={card}\r\n          onCloseActions={onCloseActions}\r\n          onCloseEditCardModal={() => onChangeShowingEditModal(false)}\r\n          dispatch={dispatch}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardActions;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useContext, useState } from \"react\";\r\n\r\nimport { CardsContext } from \"../Hand\";\r\nimport { Card as CardType } from \"../types\";\r\n\r\nimport ConfidenceGrid from \"./ConfidenceGrid\";\r\nimport CardActions from \"./CardActions\";\r\n\r\ninterface CardProps {\r\n  index: number;\r\n}\r\n\r\nconst cardStyle = css`\r\n  transition: all 0.3s ease;\r\n  min-height: 250px;\r\n  border: 2px solid black;\r\n  border-radius: 5px;\r\n  margin: 5px;\r\n  background: radial-gradient(\r\n    circle,\r\n    rgb(63, 236, 251) 0%,\r\n    rgb(70, 88, 252) 95%,\r\n    rgb(174, 70, 252) 100%\r\n  );\r\n  box-shadow: 0 0 6px 0 rgba(157, 96, 212, 0.5);\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    transition: all 0.5s ease;\r\n    box-shadow: 3px 3px 6px 0 rgba(157, 96, 212, 0.5);\r\n  }\r\n`;\r\n\r\n/**\r\n * Displays a card along with its info.\r\n * If clicked, the card shows options to play or edit it.\r\n */\r\nconst Card: FunctionComponent<CardProps> = ({ index }) => {\r\n  const [cards, dispatch] = useContext(CardsContext);\r\n  const [showingActions, setShowingActions] = useState(false);\r\n\r\n  const card = cards[index] as CardType;\r\n\r\n  return (\r\n    <div\r\n      role=\"button\"\r\n      css={cardStyle}\r\n      onClick={() => (!showingActions ? setShowingActions(true) : null)}\r\n    >\r\n      {!showingActions && <ConfidenceGrid card={card} />}\r\n      {showingActions && (\r\n        <CardActions\r\n          index={index}\r\n          card={card}\r\n          onCloseActions={() => setShowingActions(false)}\r\n          dispatch={dispatch}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\n\r\nimport {\r\n  Dispatch,\r\n  SetStateAction,\r\n  FunctionComponent,\r\n  ChangeEvent\r\n} from \"react\";\r\n\r\nimport { Card } from \"../types\";\r\n\r\n/**\r\n * Called when a checkbox changes, updates the boolean array of selected cards\r\n * @param e Checkbox change event\r\n * @param selectedCards Boolean array of selected cards\r\n * @param setSelectedCards Function to set array of selected cards\r\n */\r\nconst onCheckboxChange = (\r\n  e: ChangeEvent<HTMLInputElement>,\r\n  selectedCards: boolean[],\r\n  setSelectedCards: Dispatch<SetStateAction<boolean[]>>\r\n) => {\r\n  setSelectedCards(\r\n    selectedCards.map((value, index) => {\r\n      // each checkbox has its index as a data attribute\r\n      if (`${index}` === e.target.dataset.index) {\r\n        return e.target.checked;\r\n      } else {\r\n        return value;\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst selectCardChecboxLabelStyle = css`\r\n  padding: 25px 20px;\r\n  border-radius: 5px;\r\n  border: 1px solid black;\r\n  margin-bottom: 5px;\r\n  background: radial-gradient(\r\n    circle,\r\n    rgb(63, 236, 251) 0%,\r\n    rgb(70, 88, 252) 95%,\r\n    rgb(174, 70, 252) 100%\r\n  );\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst selectCardCheckboxContainerStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 10px;\r\n`;\r\n\r\ninterface CardSelectionProps {\r\n  cards: Card[];\r\n  selectedCards: boolean[];\r\n  setSelectedCards: Dispatch<SetStateAction<boolean[]>>;\r\n}\r\n\r\nconst CardSelection: FunctionComponent<CardSelectionProps> = ({\r\n  cards,\r\n  selectedCards,\r\n  setSelectedCards\r\n}) => {\r\n  // create a checkbox for every card\r\n  const selectCardCheckboxes = [];\r\n  for (let i = 0; i < cards.length; i++) {\r\n    selectCardCheckboxes.push(\r\n      <div\r\n        key={`select-card-${i}`}\r\n        data-card-index={i}\r\n        css={selectCardCheckboxContainerStyle}\r\n      >\r\n        <label css={selectCardChecboxLabelStyle} htmlFor={`select-card-${i}`}>\r\n          {// +1 so that they render as 1,2,3,etc.\r\n          i + 1}\r\n        </label>\r\n        <input\r\n          id={`select-card-${i}`}\r\n          data-index={i}\r\n          type=\"checkbox\"\r\n          checked={selectedCards[i]}\r\n          onChange={e => onCheckboxChange(e, selectedCards, setSelectedCards)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      css={css`\r\n        display: flex;\r\n      `}\r\n    >\r\n      {selectCardCheckboxes}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardSelection;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport { FunctionComponent, Dispatch, SetStateAction } from \"react\";\r\n\r\nconst labelStyle = css`\r\n  padding: 10px;\r\n  min-width: 50px;\r\n  display: inline-block;\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\n/**\r\n * Render a radio button to choose a number/color for a hint\r\n * @param value Value of radio button\r\n * @param emoji Emoji to use for label\r\n * @param selectedNumberOrColor The currently selected number/color\r\n * @param setSelectedNumberOrColor Function to set the currently selected number/color\r\n */\r\nconst renderColorOrNumberRadioButton = (\r\n  value: string,\r\n  emoji: string,\r\n  selectedNumberOrColor: string,\r\n  setSelectedNumberOrColor: Dispatch<SetStateAction<string>>\r\n) => {\r\n  const id = `color-or-number-${value}`;\r\n  return (\r\n    <div>\r\n      <label htmlFor={id} css={labelStyle}>\r\n        {emoji}\r\n      </label>\r\n      <input\r\n        type=\"radio\"\r\n        id={id}\r\n        value={value}\r\n        name=\"color-or-number\"\r\n        checked={selectedNumberOrColor === value}\r\n        onChange={() => setSelectedNumberOrColor(value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst radioListStyle = css`\r\n  font-size: 30px;\r\n  display: flex;\r\n`;\r\n\r\ninterface ColorOrNumberRadioButtonsProps {\r\n  selectedNumberOrColor: string;\r\n  setSelectedNumberOrColor: Dispatch<SetStateAction<string>>;\r\n}\r\n\r\n/**\r\n * Renders radio buttons to choose a number of a color for a hint\r\n */\r\nconst ColorOrNumberRadioButtons: FunctionComponent<\r\n  ColorOrNumberRadioButtonsProps\r\n> = ({ selectedNumberOrColor, setSelectedNumberOrColor }) => (\r\n  <div>\r\n    <div css={radioListStyle}>\r\n      {renderColorOrNumberRadioButton(\r\n        \"blue\",\r\n        \"🔷\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"yellow\",\r\n        \"💛\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"red\",\r\n        \"🔺\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"green\",\r\n        \"🍏\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"white\",\r\n        \"⬜\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n    </div>\r\n    <div css={radioListStyle}>\r\n      {renderColorOrNumberRadioButton(\r\n        \"one\",\r\n        \"1️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"two\",\r\n        \"2️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"three\",\r\n        \"3️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"four\",\r\n        \"4️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n      {renderColorOrNumberRadioButton(\r\n        \"five\",\r\n        \"5️⃣\",\r\n        selectedNumberOrColor,\r\n        setSelectedNumberOrColor\r\n      )}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ColorOrNumberRadioButtons;\r\n","/** @jsx jsx */\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React, { FunctionComponent, useContext, useState } from \"react\";\r\n\r\nimport { CardsContext } from \"../Hand\";\r\nimport { GiveHint, ActionTypes } from \"../actions\";\r\nimport Modal from \"../Modal\";\r\nimport Footer from \"../Modal/Footer\";\r\n\r\nimport CardSelection from \"./CardSelection\";\r\nimport ColorOrNumberRadioButtons from \"./ColorOrNumberRadioButtons\";\r\n\r\nconst hintSelectionStyle = css`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\n/**\r\n * Determine whether the given string is a number\r\n * @param selectedNumberOrColor String to check if it's a color\r\n */\r\nconst isNumber = (selectedNumberOrColor: string): boolean => {\r\n  switch (selectedNumberOrColor) {\r\n    case \"one\":\r\n    case \"two\":\r\n    case \"three\":\r\n    case \"four\":\r\n    case \"five\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Determine whether the given string is a color\r\n * @param selectedNumberOrColor String to check if it's a number\r\n */\r\nconst isColor = (selectedNumberOrColor: string): boolean => {\r\n  switch (selectedNumberOrColor) {\r\n    case \"blue\":\r\n    case \"yellow\":\r\n    case \"red\":\r\n    case \"green\":\r\n    case \"white\":\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param dispatch Function to dispatch an action\r\n * @param selectedCards Boolean array of selected cards\r\n * @param selectedNumberOrColor The selected number or color\r\n * @param closeModal Function to close the modal\r\n */\r\nconst dispatchHint = (\r\n  dispatch: (type: ActionTypes) => void,\r\n  selectedCards: boolean[],\r\n  selectedNumberOrColor: string,\r\n  closeModal: () => void\r\n) => {\r\n  // we have to convert from boolean array -> index array\r\n  // since that's what the reducer uses to apply the hint\r\n  const selectedIndices: number[] = [];\r\n\r\n  selectedCards.forEach((isChecked, index) =>\r\n    isChecked ? selectedIndices.push(index) : null\r\n  );\r\n\r\n  // figure out if the player selected a color or a number\r\n  const selectedColor = isColor(selectedNumberOrColor)\r\n    ? selectedNumberOrColor\r\n    : undefined;\r\n  const selectedNumber = isNumber(selectedNumberOrColor)\r\n    ? selectedNumberOrColor\r\n    : undefined;\r\n\r\n  // dispatch the hint and close the modal\r\n  dispatch(GiveHint(selectedIndices, selectedColor, selectedNumber));\r\n  closeModal();\r\n};\r\n\r\ninterface GiveHintModalProps {\r\n  closeModal: () => void;\r\n}\r\n\r\n/**\r\n * A modal to give a hint to the player\r\n */\r\nconst GiveHintModal: FunctionComponent<GiveHintModalProps> = ({\r\n  closeModal\r\n}) => {\r\n  // grab cards and dispatch from the card context\r\n  const [cards, dispatch] = useContext(CardsContext);\r\n\r\n  // boolean array to drive the selected card checkboxes\r\n  const [selectedCards, setSelectedCards] = useState<boolean[]>(\r\n    Array(cards.length).fill(false)\r\n  );\r\n\r\n  // string to drive the radio button for color/number\r\n  const [selectedNumberOrColor, setSelectedNumberOrColor] = useState<string>(\r\n    \"\"\r\n  );\r\n\r\n  return (\r\n    <Modal>\r\n      <React.Fragment>\r\n        <h1>Give Hint</h1>\r\n\r\n        {/* Checkboxes and radio buttons to select cards and color/number */}\r\n        <div css={hintSelectionStyle}>\r\n          <CardSelection\r\n            cards={cards}\r\n            selectedCards={selectedCards}\r\n            setSelectedCards={setSelectedCards}\r\n          />\r\n          <ColorOrNumberRadioButtons\r\n            selectedNumberOrColor={selectedNumberOrColor}\r\n            setSelectedNumberOrColor={setSelectedNumberOrColor}\r\n          />\r\n        </div>\r\n\r\n        {/* Footer to either apply hint or cancel */}\r\n        <Footer\r\n          onCloseClick={closeModal}\r\n          onConfirmClick={() =>\r\n            dispatchHint(\r\n              dispatch,\r\n              selectedCards,\r\n              selectedNumberOrColor,\r\n              closeModal\r\n            )\r\n          }\r\n        />\r\n      </React.Fragment>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default GiveHintModal;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport Modal from \"./Modal\";\r\nimport Footer from \"./Modal/Footer\";\r\nimport Button from \"./Button\";\r\n\r\nconst newGameButtonStyle = css`\r\n  margin: 25px;\r\n  padding: 40px 70px;\r\n`;\r\n\r\ninterface OptionsModalProps {\r\n  /** Function to call to close modal */\r\n  onCloseOptionsModal: () => void;\r\n\r\n  /** Function that can be called to wipe out the state of the game and go back to the main menu **/\r\n  onClearHand: () => void;\r\n}\r\n\r\n/**\r\n * Modal for various options\r\n */\r\nconst OptionsModal: FunctionComponent<OptionsModalProps> = ({\r\n  onCloseOptionsModal,\r\n  onClearHand\r\n}) => {\r\n  return (\r\n    <Modal>\r\n      <h1>Options</h1>\r\n      <Button css={newGameButtonStyle} onClick={() => onClearHand()}>\r\n        New Game\r\n      </Button>\r\n      <Footer onCloseClick={onCloseOptionsModal} />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default OptionsModal;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport OptionsModal from \"./OptionsModal\";\r\n\r\nconst containerStyle = css`\r\n  grid-row: 2;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-left: 5px;\r\n  margin-right: 5px;\r\n`;\r\n\r\nconst buttonStyle = css`\r\n  height: 90%;\r\n  width: 25%;\r\n`;\r\n\r\ninterface FooterProps {\r\n  /** Function to call to set whether the give him modal is currently being shown */\r\n  setShowingGiveHintModal: (showingGiveHintModal: boolean) => void;\r\n\r\n  /** Function that can be called to wipe out the state of the game and go back to the main menu **/\r\n  clearHand: () => void;\r\n}\r\n\r\n/** The main footer for the app */\r\nconst Footer: FunctionComponent<FooterProps> = ({\r\n  setShowingGiveHintModal,\r\n  clearHand\r\n}) => {\r\n  const [showingOptionsModal, setShowingOptionsModal] = useState(false);\r\n  return (\r\n    <div css={containerStyle}>\r\n      <Button css={buttonStyle} onClick={() => setShowingOptionsModal(true)}>\r\n        Options\r\n      </Button>\r\n      <Button css={buttonStyle} onClick={() => setShowingGiveHintModal(true)}>\r\n        Give Hint\r\n      </Button>\r\n\r\n      {showingOptionsModal && (\r\n        <OptionsModal\r\n          onCloseOptionsModal={() => setShowingOptionsModal(false)}\r\n          onClearHand={clearHand}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport {\r\n  FunctionComponent,\r\n  useReducer,\r\n  createContext,\r\n  Context,\r\n  useState\r\n} from \"react\";\r\n\r\nimport CardsReducer from \"./CardsReducer\";\r\nimport Card from \"./Card\";\r\nimport GiveHintModal from \"./GiveHintModal\";\r\nimport Footer from \"./Footer\";\r\nimport { ActionTypes } from \"./actions\";\r\nimport { Card as CardType } from \"./types\";\r\n\r\n// this initial state and context are created on first render\r\nexport let CardsContext: Context<[CardType[], ((action: ActionTypes) => void)]>;\r\n\r\n/**\r\n *\r\n * @param numberOfCards How many cards are in the player's hand\r\n *  Cards pull their state from the context\r\n */\r\nconst renderCards = (numberOfCards: number) => {\r\n  const cards: JSX.Element[] = [];\r\n\r\n  for (let i = 0; i < numberOfCards; i++) {\r\n    cards.push(<Card index={i} key={`card-${i}`} />);\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\nconst mainContainerStyle = css`\r\n  display: grid;\r\n  grid-template-rows: 5fr 1fr;\r\n  height: 100%;\r\n`;\r\n\r\nconst cardsContainerStyle = css`\r\n  grid-row: 1;\r\n  display: grid;\r\n`;\r\n\r\ninterface HandProps {\r\n  /** Initial state to use when rendering hand; updates are handled with the inner context and reducer */\r\n  initialState: CardType[];\r\n\r\n  /** Function that can be called to wipe out the state of the game and go back to the main menu **/\r\n  clearHand: () => void;\r\n}\r\n\r\n/** Renders all of the cards in the player's hand */\r\nconst Hand: FunctionComponent<HandProps> = ({ initialState, clearHand }) => {\r\n  // create our initial state and context if we haven't yet\r\n  if (!CardsContext) {\r\n    CardsContext = createContext<[CardType[], ((action: ActionTypes) => void)]>(\r\n      [initialState, (action: ActionTypes) => {}]\r\n    );\r\n  }\r\n\r\n  const [showingGiveHintModal, setShowingGiveHintModal] = useState(false);\r\n\r\n  // one column for every card\r\n  const cardsGrid = css`\r\n    ${cardsContainerStyle}\r\n    grid-template-columns: repeat(${initialState.length}, 1fr);\r\n  `;\r\n\r\n  return (\r\n    <div css={mainContainerStyle}>\r\n      {/*\r\n        By putting the result of useReducer as the value of the provider,\r\n        the current state and the dispatch function are available to anything using the context\r\n      */}\r\n      <CardsContext.Provider value={useReducer(CardsReducer, initialState)}>\r\n        <div css={cardsGrid}>{renderCards(initialState.length)}</div>\r\n        <Footer\r\n          setShowingGiveHintModal={setShowingGiveHintModal}\r\n          clearHand={clearHand}\r\n        />\r\n        {showingGiveHintModal && (\r\n          <GiveHintModal closeModal={() => setShowingGiveHintModal(false)} />\r\n        )}\r\n      </CardsContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Hand;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent } from \"react\";\r\n\r\nimport Button from \"./Button\";\r\nimport { Card as CardType } from \"./types\";\r\nimport { getInitialState } from \"./CardsReducer\";\r\n\r\nconst numberOfCardsContainerStyle = css`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  max-width: 500px;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  padding-top: 15%;\r\n`;\r\n\r\nconst numberOfCardsButtonStyle = css`\r\n  padding: 25px;\r\n`;\r\n\r\nconst titleStyle = css`\r\n  margin: 0;\r\n`;\r\n\r\ninterface MainMenuProps {\r\n  setHand: (cards: CardType[]) => void;\r\n}\r\n\r\n/** Renders buttons to choose the number of cards to use in the game */\r\nconst MainMenu: FunctionComponent<MainMenuProps> = ({ setHand }) => {\r\n  return (\r\n    <div>\r\n      <h1 css={titleStyle}>火薬</h1>\r\n      <h2>Kayaku</h2>\r\n      <h3>How many cards?</h3>\r\n      <div css={numberOfCardsContainerStyle}>\r\n        <Button\r\n          css={numberOfCardsButtonStyle}\r\n          onClick={() => setHand(getInitialState(4))}\r\n        >\r\n          4\r\n        </Button>\r\n        <Button\r\n          css={numberOfCardsButtonStyle}\r\n          onClick={() => setHand(getInitialState(5))}\r\n        >\r\n          5\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainMenu;\r\n","/** @jsx jsx */\r\nimport { jsx, css } from \"@emotion/core\";\r\nimport { FunctionComponent, useState, useEffect } from \"react\";\r\n\r\nimport Hand from \"./Hand\";\r\nimport { Card as CardType } from \"./types\";\r\nimport MainMenu from \"./MainMenu\";\r\n\r\nconst mainContainerStyle = css`\r\n  text-align: center;\r\n  width: 100%;\r\n  height: 100%;\r\n  color: white;\r\n  background: linear-gradient(\r\n    135deg,\r\n    rgba(50, 255, 57, 1) 0%,\r\n    rgba(137, 196, 255, 1) 100%\r\n  );\r\n`;\r\n\r\n/**\r\n * Renders the current hand if the player has selected the number of cards,\r\n * or buttons to select the number of cards if they haven't\r\n */\r\nconst App: FunctionComponent = () => {\r\n  const [hand, setHand] = useState(null as CardType[] | null);\r\n\r\n  useEffect(() => {\r\n    // see if we have a current game in local storage; if we do, set the hand to it\r\n    const currentGame = localStorage.getItem(\"currentGame\");\r\n    if (currentGame) {\r\n      setHand(JSON.parse(currentGame) as CardType[]);\r\n    }\r\n  }, []);\r\n\r\n  // function that can be called to wipe out the state of the game and go back to the main menu\r\n  const clearHand = () => {\r\n    setHand(null);\r\n    localStorage.removeItem(\"currentGame\");\r\n  };\r\n\r\n  return (\r\n    <div css={mainContainerStyle}>\r\n      {/* If we have a hand, show it. Otherwise, show the main menu. */}\r\n      {hand ? (\r\n        <Hand initialState={hand} clearHand={clearHand} />\r\n      ) : (\r\n        <MainMenu setHand={setHand} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport \"./index.css\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// Register the service worker to make this a progressive web app\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}